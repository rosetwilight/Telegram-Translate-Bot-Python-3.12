import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from googletrans import Translator
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
translator = Translator()
user_modes = {}

def language_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª ‚Üí –†—É—Å", callback_data="en-ru"),
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å ‚Üí –ê–Ω–≥–ª", callback_data="ru-en")
        ]
    ])
    return kb

@dp.message(CommandStart())
async def start_handler(message: Message):
    user_modes[message.from_user.id] = "en-ru"
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç–∏–∫, –º–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≥–æ—Ç–æ–≤ üòò\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=language_menu()
    )

@dp.callback_query(F.data.in_({"en-ru", "ru-en"}))
async def language_callback(callback: types.CallbackQuery):
    current = user_modes.get(callback.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç —Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
    if current == callback.data:
        await callback.answer("–£–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ä–µ–∂–∏–º üòò", show_alert=False)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –∏ –æ—Ç–≤–µ—á–∞–µ–º
    user_modes[callback.from_user.id] = callback.data
    await callback.answer(f"–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–∂—É: {callback.data.replace('-', ' ‚Üí ')}")

    # –ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    try:
        await callback.message.edit_reply_markup(reply_markup=language_menu())
    except Exception as e:
        # Telegram –º–æ–∂–µ—Ç –≤—Å—ë –µ—â—ë —Ä—É–≥–∞—Ç—å—Å—è ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ª–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")


@dp.message(F.text)
async def translate_message(message: Message):
    mode = user_modes.get(message.from_user.id, "en-ru")
    src, dest = mode.split('-')
    try:
        result = translator.translate(message.text, src=src, dest=dest)
        await message.reply(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{result.text}")
    except Exception:
        await message.reply("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º–æ–π –∫–æ—Ç–∏–∫... –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ü•∫")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
